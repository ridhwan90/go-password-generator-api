// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: password.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPassword = `-- name: CreatePassword :one
INSERT INTO password (
  id, user_uuid, site, site_username, site_email, generated_password
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, user_uuid, site, site_username, site_email, generated_password, created_at
`

type CreatePasswordParams struct {
	ID                uuid.UUID      `json:"id"`
	UserUuid          uuid.NullUUID  `json:"user_uuid"`
	Site              string         `json:"site"`
	SiteUsername      sql.NullString `json:"site_username"`
	SiteEmail         sql.NullString `json:"site_email"`
	GeneratedPassword string         `json:"generated_password"`
}

func (q *Queries) CreatePassword(ctx context.Context, arg CreatePasswordParams) (Password, error) {
	row := q.db.QueryRowContext(ctx, createPassword,
		arg.ID,
		arg.UserUuid,
		arg.Site,
		arg.SiteUsername,
		arg.SiteEmail,
		arg.GeneratedPassword,
	)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.Site,
		&i.SiteUsername,
		&i.SiteEmail,
		&i.GeneratedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const deletePassword = `-- name: DeletePassword :exec
DELETE FROM password
WHERE id = $1
`

func (q *Queries) DeletePassword(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePassword, id)
	return err
}

const getPassword = `-- name: GetPassword :one
SELECT id, user_uuid, site, site_username, site_email, generated_password, created_at FROM password
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPassword(ctx context.Context, id uuid.UUID) (Password, error) {
	row := q.db.QueryRowContext(ctx, getPassword, id)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.Site,
		&i.SiteUsername,
		&i.SiteEmail,
		&i.GeneratedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :many
SELECT id, user_uuid, site, site_username, site_email, generated_password, created_at FROM password
WHERE user_uuid = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, userUuid uuid.NullUUID) ([]Password, error) {
	rows, err := q.db.QueryContext(ctx, getUserPassword, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Password
	for rows.Next() {
		var i Password
		if err := rows.Scan(
			&i.ID,
			&i.UserUuid,
			&i.Site,
			&i.SiteUsername,
			&i.SiteEmail,
			&i.GeneratedPassword,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPassword = `-- name: ListPassword :many
SELECT id, user_uuid, site, site_username, site_email, generated_password, created_at FROM password
ORDER BY user_uuid
`

func (q *Queries) ListPassword(ctx context.Context) ([]Password, error) {
	rows, err := q.db.QueryContext(ctx, listPassword)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Password
	for rows.Next() {
		var i Password
		if err := rows.Scan(
			&i.ID,
			&i.UserUuid,
			&i.Site,
			&i.SiteUsername,
			&i.SiteEmail,
			&i.GeneratedPassword,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPasswordbyUser = `-- name: ListPasswordbyUser :many
SELECT id, user_uuid, site, site_username, site_email, generated_password, created_at FROM password
WHERE user_uuid = $1
`

func (q *Queries) ListPasswordbyUser(ctx context.Context, userUuid uuid.NullUUID) ([]Password, error) {
	rows, err := q.db.QueryContext(ctx, listPasswordbyUser, userUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Password
	for rows.Next() {
		var i Password
		if err := rows.Scan(
			&i.ID,
			&i.UserUuid,
			&i.Site,
			&i.SiteUsername,
			&i.SiteEmail,
			&i.GeneratedPassword,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE password
set site = $2,
site_username = $3,
site_email = $4,
generated_password = $5
WHERE id = $1
RETURNING id, user_uuid, site, site_username, site_email, generated_password, created_at
`

type UpdatePasswordParams struct {
	ID                uuid.UUID      `json:"id"`
	Site              string         `json:"site"`
	SiteUsername      sql.NullString `json:"site_username"`
	SiteEmail         sql.NullString `json:"site_email"`
	GeneratedPassword string         `json:"generated_password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (Password, error) {
	row := q.db.QueryRowContext(ctx, updatePassword,
		arg.ID,
		arg.Site,
		arg.SiteUsername,
		arg.SiteEmail,
		arg.GeneratedPassword,
	)
	var i Password
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.Site,
		&i.SiteUsername,
		&i.SiteEmail,
		&i.GeneratedPassword,
		&i.CreatedAt,
	)
	return i, err
}
