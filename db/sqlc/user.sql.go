// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, username, hashed_password, userinfo_uuid
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, hashed_password, userinfo_uuid, password_change_at, created_at
`

type CreateUserParams struct {
	ID             uuid.UUID     `json:"id"`
	Username       string        `json:"username"`
	HashedPassword string        `json:"hashed_password"`
	UserinfoUuid   uuid.NullUUID `json:"userinfo_uuid"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.UserinfoUuid,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.UserinfoUuid,
		&i.PasswordChangeAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, userinfo_uuid, password_change_at, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.UserinfoUuid,
		&i.PasswordChangeAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserWithInfo = `-- name: GetUserWithInfo :one
SELECT users.id, username, hashed_password, userinfo_uuid, password_change_at, users.created_at, userinfo.id, first_name, last_name, phone_number, email, userinfo.created_at from users
LEFT JOIN userinfo ON users.userinfo_uuid = userinfo.id
WHERE users.id = $1
`

type GetUserWithInfoRow struct {
	ID               uuid.UUID      `json:"id"`
	Username         string         `json:"username"`
	HashedPassword   string         `json:"hashed_password"`
	UserinfoUuid     uuid.NullUUID  `json:"userinfo_uuid"`
	PasswordChangeAt time.Time      `json:"password_change_at"`
	CreatedAt        time.Time      `json:"created_at"`
	ID_2             uuid.NullUUID  `json:"id_2"`
	FirstName        sql.NullString `json:"first_name"`
	LastName         sql.NullString `json:"last_name"`
	PhoneNumber      sql.NullString `json:"phone_number"`
	Email            sql.NullString `json:"email"`
	CreatedAt_2      sql.NullTime   `json:"created_at_2"`
}

func (q *Queries) GetUserWithInfo(ctx context.Context, id uuid.UUID) (GetUserWithInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserWithInfo, id)
	var i GetUserWithInfoRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.UserinfoUuid,
		&i.PasswordChangeAt,
		&i.CreatedAt,
		&i.ID_2,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Email,
		&i.CreatedAt_2,
	)
	return i, err
}

const getUserbyUsername = `-- name: GetUserbyUsername :one
SELECT id, username, hashed_password, userinfo_uuid, password_change_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserbyUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserbyUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.UserinfoUuid,
		&i.PasswordChangeAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, hashed_password, userinfo_uuid, password_change_at, created_at FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.UserinfoUuid,
			&i.PasswordChangeAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInfoUUID = `-- name: UpdateUserInfoUUID :one
UPDATE users
set userinfo_uuid = $2
WHERE id = $1
RETURNING id, username, hashed_password, userinfo_uuid, password_change_at, created_at
`

type UpdateUserInfoUUIDParams struct {
	ID           uuid.UUID     `json:"id"`
	UserinfoUuid uuid.NullUUID `json:"userinfo_uuid"`
}

func (q *Queries) UpdateUserInfoUUID(ctx context.Context, arg UpdateUserInfoUUIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserInfoUUID, arg.ID, arg.UserinfoUuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.UserinfoUuid,
		&i.PasswordChangeAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUsers = `-- name: UpdateUsers :one
UPDATE users
set username = $2,
hashed_password = $3
WHERE id = $1
RETURNING id, username, hashed_password, userinfo_uuid, password_change_at, created_at
`

type UpdateUsersParams struct {
	ID             uuid.UUID `json:"id"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
}

func (q *Queries) UpdateUsers(ctx context.Context, arg UpdateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsers, arg.ID, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.UserinfoUuid,
		&i.PasswordChangeAt,
		&i.CreatedAt,
	)
	return i, err
}
