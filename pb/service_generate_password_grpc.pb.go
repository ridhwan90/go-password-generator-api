// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service_generate_password.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeneratePasswordClient is the client API for GeneratePassword service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneratePasswordClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	CreatePassword(ctx context.Context, in *CreatePasswordRequest, opts ...grpc.CallOption) (*CreatePasswordResponse, error)
	ListPasswordbyUser(ctx context.Context, in *UsernameParams, opts ...grpc.CallOption) (*ListUserPassword, error)
}

type generatePasswordClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneratePasswordClient(cc grpc.ClientConnInterface) GeneratePasswordClient {
	return &generatePasswordClient{cc}
}

func (c *generatePasswordClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.GeneratePassword/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatePasswordClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, "/pb.GeneratePassword/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatePasswordClient) CreatePassword(ctx context.Context, in *CreatePasswordRequest, opts ...grpc.CallOption) (*CreatePasswordResponse, error) {
	out := new(CreatePasswordResponse)
	err := c.cc.Invoke(ctx, "/pb.GeneratePassword/CreatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatePasswordClient) ListPasswordbyUser(ctx context.Context, in *UsernameParams, opts ...grpc.CallOption) (*ListUserPassword, error) {
	out := new(ListUserPassword)
	err := c.cc.Invoke(ctx, "/pb.GeneratePassword/ListPasswordbyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneratePasswordServer is the server API for GeneratePassword service.
// All implementations must embed UnimplementedGeneratePasswordServer
// for forward compatibility
type GeneratePasswordServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	CreatePassword(context.Context, *CreatePasswordRequest) (*CreatePasswordResponse, error)
	ListPasswordbyUser(context.Context, *UsernameParams) (*ListUserPassword, error)
	mustEmbedUnimplementedGeneratePasswordServer()
}

// UnimplementedGeneratePasswordServer must be embedded to have forward compatible implementations.
type UnimplementedGeneratePasswordServer struct {
}

func (UnimplementedGeneratePasswordServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGeneratePasswordServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGeneratePasswordServer) CreatePassword(context.Context, *CreatePasswordRequest) (*CreatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassword not implemented")
}
func (UnimplementedGeneratePasswordServer) ListPasswordbyUser(context.Context, *UsernameParams) (*ListUserPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPasswordbyUser not implemented")
}
func (UnimplementedGeneratePasswordServer) mustEmbedUnimplementedGeneratePasswordServer() {}

// UnsafeGeneratePasswordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneratePasswordServer will
// result in compilation errors.
type UnsafeGeneratePasswordServer interface {
	mustEmbedUnimplementedGeneratePasswordServer()
}

func RegisterGeneratePasswordServer(s grpc.ServiceRegistrar, srv GeneratePasswordServer) {
	s.RegisterService(&GeneratePassword_ServiceDesc, srv)
}

func _GeneratePassword_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratePasswordServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GeneratePassword/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratePasswordServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratePassword_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratePasswordServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GeneratePassword/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratePasswordServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratePassword_CreatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratePasswordServer).CreatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GeneratePassword/CreatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratePasswordServer).CreatePassword(ctx, req.(*CreatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratePassword_ListPasswordbyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratePasswordServer).ListPasswordbyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GeneratePassword/ListPasswordbyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratePasswordServer).ListPasswordbyUser(ctx, req.(*UsernameParams))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneratePassword_ServiceDesc is the grpc.ServiceDesc for GeneratePassword service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneratePassword_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GeneratePassword",
	HandlerType: (*GeneratePasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GeneratePassword_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _GeneratePassword_LoginUser_Handler,
		},
		{
			MethodName: "CreatePassword",
			Handler:    _GeneratePassword_CreatePassword_Handler,
		},
		{
			MethodName: "ListPasswordbyUser",
			Handler:    _GeneratePassword_ListPasswordbyUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_generate_password.proto",
}
